name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

        
      - name: Create .env file
        run: |
          cp .env.example .env
          echo "APP_KEY=base64:$(openssl rand -base64 32)" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_DATABASE=laravel" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_APP_ROOT_PASSWORD }}" >> .env

      - name: Build and start containers
        run: docker compose up -d --build
        env:
          DB_PASSWORD: ${{ secrets.DB_APP_ROOT_PASSWORD }}

      - name: Wait for database
        run: |
          # Wait for MySQL to be ready
          docker compose exec -T db sh -c 'until mysqladmin ping -h"localhost" -uroot -p${{ secrets.DB_APP_ROOT_PASSWORD }} --silent; do sleep 1; done'

      - name: Install Composer dependencies
        run: |
          docker compose exec -T app bash -c "cd /var/www && composer install --no-interaction --no-progress"
          docker compose exec -T app bash -c "cd /var/www && composer dump-autoload --optimize"

      - name: Install and build frontend assets
        run: |
          docker compose exec -T app bash -c "cd /var/www && npm install"
          docker compose exec -T app bash -c "cd /var/www && npm run build"

      - name: Run migrations
        run: docker compose exec -T app php artisan migrate --force

      - name: Run PHPStan
        run: docker compose exec -T app bash -c "cd /var/www && composer phpstan"

      - name: Run tests
        run: docker compose exec -T app php artisan test

      - name: Display logs on failure
        if: failure()
        run: |
          echo "Docker logs:"
          docker compose logs

      - name: Stop containers
        if: always()
        run: docker compose down
